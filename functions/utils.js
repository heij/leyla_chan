require('dotenv').config();
const fs = require('fs');
const providers = require('../options/providers');
const languages = require('../options/languages');
//const qualities = require('../options/qualities');
var path = require('path');

module.exports.help = function(Discord, client, message, args) {
	if (args.includes('search')) {
		let currentProviders = formatProviders();
		message.channel.send({
			embed: {
			    color: 0x731399,
			    fields: [{
			    	name: 'EntÃ£o vocÃª quer saber sobre o __search__? Vamos lÃ¡!',
			    	value: 'Com este comando, vocÃª pode procurar todo e qualquer anime postado no site nyaa.si e receber o link magnet imediatamente! NÃ£o Ã© fantÃ¡stico? \n \u200b'
			    }, 
			    {
			    	name: '**__Usagem:__** ',
			    	value: process.env.PREFIX + 'search *__anime__* --p *__fansub__* --l *__linguagem__* \n \u200b'
			    },
				currentProviders,
				{
					name: '**Linguagens disponÃ­veis:**',
					value: '*__ing__* : InglÃªs\n*__jap__* : JaponÃªs\n*__ni__* : Outras (PortuguÃªs, Espanhol, AlemÃ£o, etc)'
				}]
		  	}
		})
	} else if (args.includes('batch')) {
		let currentProviders = formatProviders();
		let currentQualities = formatQualities();
		message.channel.send({
			embed: {
			    color: 0x731399,
			    fields: [{
			    	name: 'EntÃ£o vocÃª quer saber sobre o __batch__? Vamos lÃ¡!',
			    	value: 'Com este comando vocÃª pode buscar animes em lote! Chega de cansar seus dedos buscando episÃ³dio por episÃ³dio! Mas atenÃ§Ã£o: para poder buscar em lote, eu preciso (obrigatoriamente) saber qual a fansub escolhida e quais episÃ³dios buscar! Ah, e nÃ£o esqueÃ§a de colocar o *~* entre os episÃ³dios inicial e final! \n \u200b'
			    }, 
			    {
			    	name: '**__!!! Propriedades obrigatÃ³rias !!! :__** ',
			    	value: 'Fansub __(--p)__\nEpisÃ³dio inicial e episÃ³dio final __(--e)__\n \u200b'
			    },				    
			    {
			    	name: '**__Usagem:__** ',
			    	value: process.env.PREFIX + 'batch *__anime__* --p *__fansub__* --q *__qualidade__* --e *__episÃ³dio incial__*~*__episÃ³dio final__*\n \u200b'
			    },
				currentProviders,
				currentQualities
				]
		  	}
		})		
	} else if (args.includes('sub')) {
		let currentProviders = formatProviders();
		let currentQualities = formatQualities();
		message.channel.send({
			embed: {
			    color: 0x731399,
			    fields: [{
			    	name: 'EntÃ£o vocÃª quer saber sobre o __sub__? Vamos lÃ¡!',
			    	value: 'Com este comando, vocÃª pode se inscrever em animes e receber automaticamente o link magnet assim que um novo episÃ³dio for lanÃ§ado! Hehe, sim, eu sei que sou fantÃ¡stica! \n \u200b'
			    }, 
			    {
			    	name: '**__Usagem:__** ',
			    	value: process.env.PREFIX + 'sub *__anime__* --p *__fansub__* --q *__qualidade__*\n \u200b'
			    },
				currentProviders,
				currentQualities
				]
		  	}
		})		
	} else if (args.includes('current')) {
		let currentProviders = formatProviders();
		message.channel.send({
			embed: {
			    color: 0x731399,
			    fields: [{
			    	name: 'EntÃ£o vocÃª quer saber sobre o __current__? Vamos lÃ¡!',
			    	value: 'Com este comando, vocÃª pode descobrir quais animes estÃ£o sendo lanÃ§ados atualmente pela fansub que vocÃª escolheu! \n \u200b'
			    }, 
			    {
			    	name: '**__Usagem:__** ',
			    	value: process.env.PREFIX + 'current --p *__fansub__*'
			    },
			    currentProviders
			    ]
		  	}
		})
	} else if (args.includes('unsub')) {
		message.channel.send({
			embed: {
			    color: 0x731399,
			    fields: [{
			    	name: 'EntÃ£o vocÃª quer saber sobre o __unsub__? Vamos lÃ¡!',
			    	value: 'Com este comando, vocÃª pode se desinscrever de animes que jÃ¡ terminaram ou que vocÃª decidiu deixar de acompanhar... Ã‰ um comando meio triste, mas tudo chega ao fim eventualmente...\n \u200b'
			    }, 
			    {
			    	name: '**__Usagem:__** ',
			    	value: process.env.PREFIX + 'unsub *__anime__*'
			    }]
		  	}
		})
	} else if (args.includes('list')) {
		message.channel.send({
			embed: {
			    color: 0x731399,
			    fields: [{
			    	name: 'EntÃ£o vocÃª quer saber sobre o __list__? Vamos lÃ¡!',
			    	value: 'Com este comando, vocÃª pode verificar todos os animes em que vocÃª estÃ¡ atualmente inscrito! Claro que eu nÃ£o estaria completa sem isso, nÃ©?\n \u200b'
			    }, 
			    {
			    	name: '**__Usagem:__** ',
			    	value: process.env.PREFIX + 'list'
			    }]
		  	}
		})	
	} else {
		message.channel.send({
			embed: {
			    author: {
			      name: 'Oieee! Eu sou a Leyla-chan, seu bot favorito de torrents!',
			      icon_url: client.user.avatarURL
			    },
			    color: 0x731399,
			    fields: [{
			    	name: '\u200b',
			    	value: 'Certo, entÃ£o vocÃª quer saber como me usar? Pervertido! Hehe, brincadeira ðŸ˜œ. Bom, aqui vÃ£o os comandos que eu conheÃ§o atÃ© agora; use __**' + process.env.PREFIX + 'help comando**__ para saber mais sobre ele! Ah, e lembre-se sempre de usar o prefixo **' + process.env.PREFIX + '** quando for conversar comigo! \n \u200b'
			    }, 
			    {
			    	name: '__search__',
			    	value: 'Quer buscar algum anime no Nyaa.si? Esse Ã© o comando certo pra vocÃª!\n \u200b'
			    },
			    {
			    	name: '__batch__',
			    	value: 'Quer buscar vÃ¡rios episÃ³dios de um mesmo anime, mas estÃ¡ com preguiÃ§a de ir um por um? Basta dizer a palavra mÃ¡gica batch e eu realizarei seu desejo!\n \u200b'
			    },			    
				{
					name: '__sub__',
					value: 'E se vocÃª recebesse seus animes favoritos direto no seu inbox, assim que eles fossem lanÃ§ados? E se eu te dissesse que eu posso tornar isso realidade?\n \u200b'
				},
				{
					name: '__current__',
					value: 'Um Ã³timo comando para saber quais animes estÃ£o sendo lanÃ§ados atualmente pela sua fansub favorita!\n \u200b'

				},
				{
					name: '__unsub__',
					value: 'E se vocÃª deixasse de receber seus animes favoritos direto no seu inbox? E se eu te dissesse que eu tambÃ©m posso tornar isso realidade?\n \u200b'
				},
				{
					name: '__list__',
					value: 'E vocÃª tambÃ©m pode ver em que animes estÃ¡ inscrito atualmente! Que tipo de magia Ã© essa?'
				}]
		  	}
		})
	}
}

function formatProviders() {
	let entries = Object.entries(providers);
	let embedField = {
		name: '**Fansubs disponÃ­veis:**',
		value: ''
	};

	entries.forEach((entry) => {
		embedField.value = embedField.value  + '*__' + entry[0] + '__* : ' + entry[1].name + '\n'
	})
	return embedField;
}

function formatQualities() {
	let entries = qualities;
	let embedField = {
		name: '**Qualidades disponÃ­veis:**',
		value: ''
	};

	entries.forEach((entry) => {
		embedField.value = embedField.value  + '*__' + entry + '__* : ' + entry + 'p\n'
	})
	return embedField;
}